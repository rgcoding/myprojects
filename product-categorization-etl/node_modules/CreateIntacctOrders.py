# -*- coding: utf-8 -*-
"""
Created on Tue Oct 13 11:19:42 2020
Order sync from Secure Portal to Intacct
Run automatically every 5 min (or so) on Lambda to sync new order data from Postgres to Intacct if records have been finished recently
@author: Natasha.Polishchuk
Jira: DATAENG-144
"""

import pandas as pd
import os
from datetime import datetime
import logging


# temp filepath for testing
#file_path = '/Users/Natasha.Polishchuk/Documents/Data Engineering/Intacct/IntacctOrderCreate/'
#os.chdir(file_path)

#Cresco tools
import snow
import postgresql
import intacctsend

"""Variables"""
logger = logging.getLogger()
logger.setLevel(logging.INFO)

now = datetime.now()
timestamp = now.isoformat()


#Secure Portal connection - replace with prod location & move to secrets manager
host = 'adbc-crescolabs-int.cluster-czta0iybfkhx.us-west-2.rds.amazonaws.com'
user = 'crescolabs'
password = 'NUx47T2qIQ81j65CYOIfQjZZbiXrBAdL'
port = 5432
database = 'crescolabs'
driver = 'PostgreSQL'
ssh_user = 'ec2-user'
ssh_host = 'ec2-35-164-208-134.us-west-2.compute.amazonaws.com'
ssh_port = 22
ssh_pkey = '/Users/Natasha.Polishchuk/Documents/Data Engineering/Intacct/bastion-ssh-key-pair.pem'

pg_con = postgresql.pg(host=host, user=user, password=password, port=port,
            database=database, ssh_user=ssh_user, ssh_host=ssh_host, ssh_port=ssh_port,
            ssh_pkey=ssh_pkey, driver=driver)

#Snowflake connection
WAREHOUSE = "ANALYST_WH"
DATABASE = "DATA_ENG"
SCHEMA = "INTACCT"
ROLE = "ETL_LOAD_ROLE"

in_sql = "select c.id, 'Sales Order' as	transactiontype, \
    cast(extract(year from c.finished_on) as varchar(4)) as	year, \
    cast(extract(month from c.finished_on) as varchar(2))	as month, \
    cast(extract(day from c.finished_on) as varchar(2))	as day, \
    v.intacct_customer_id as customerid, \
    'Pending' as state,	\
    s.intacct_id as	itemid, \
    ci.quantity as	quantity, \
    to_char(coalesce(ci.manual_price,ci.price)/ci.quantity,'FM999999999.00') as price, \
    'Each' as unit, \
    case when i.brand like '%Mindy%' then 'Mindy' \
    	when i.brand = 'Kiva' then 'Kiva' \
        when i.brand = 'Good News' then 'IL GoodNews' \
        when right(i.bt_product_name,3) = '(L)' then 'Lincoln' \
        when right(i.bt_product_name,3) = '(K)' then 'Kankakee' \
        else 'Joliet' end as departmentid, \
    case when i.brand like '%Mindy%' then 'Edibles' \
    	when i.brand = 'Kiva' then 'Edibles' \
        when i.brand = 'Good News' then 'Good News' \
        else 'Labs' end as locationid, \
    case when i.brand like '%Mindy%' then 'Mindy' \
    	when i.brand = 'Kiva' then 'Kiva' \
        when i.brand = 'Good News' then 'IL GoodNews' \
        when right(i.bt_product_name,3) = '(L)' then 'Lincoln' \
        when right(i.bt_product_name,3) = '(K)' then 'Kankakee' \
        else 'Joliet' end as classid \
    from carts c \
    	inner join vendors v on c.vendor_id = v.id \
        inner join cart_items ci on ci.cart_id = c.id \
        inner join inventory i on i.id = ci.inventory_id \
        inner join skus s on s.id = i.sku_id \
    where inventory_type = 'wholesale' and status = 'finished' and store_id = 317 \
  and (c.last_intacct_send_date is null or c.last_intacct_send_date < c.finished_on);"


    
def sync_latest_orders():
    """query portal to get orders finalized but not yet sent
    calls to a Postgres connection then sends them to Intacct"""
    orders = pg_con.execute_sql_via_ssh_tunnel(in_sql)
    
    num_orders = orders['id'].nunique()
    
    if num_orders == 0:
        logger.info("No orders to sync")
    else:
        logger.info("Retrieved " + str(num_orders) + " Secure Portal orders")
        orders_x = intacctsend.create_orders_XML(orders)
        
        order_log = pd.DataFrame(orders_x)
        order_log[['status','status_details']] = pd.DataFrame(order_log[1].tolist()) 
        order_log.rename(columns = {0:'cart_id'}, inplace = True)
        order_log = order_log[['cart_id','status','status_details']]
        return order_log
    return None


def confirm_creation_carts(df):
    """If payload response was successful, watermark updated cart records in secure portal"""
    df = df.astype(str)
    successes = df['status'] == "success"
    df = df[successes]
    success_ct = len(df)
    
    if success_ct > 0:
        carts_to_update = str(list(df.cart_id))[1:-1]
        out_sql = f"UPDATE carts SET last_intacct_send_date = '{timestamp}' WHERE id in ({carts_to_update});"
        pg_con.update_sql_via_ssh_tunnel(out_sql)
        logger.info("Successfully synced " + str(success_ct) + " orders to Intacct")
    
    return success_ct

def log_to_snowflake(df):
    """Log in snowflake too, so we have ETL job logs in one place"""
    
    df['sync_time'] = timestamp
    snow_con = snow.Snowflake(WAREHOUSE=WAREHOUSE,
            DATABASE=DATABASE,
            SCHEMA=SCHEMA,
            ROLE=ROLE)
    snow_con.write_pandas_df(data_frame = df,table_name='ORDER_SYNC',schema=SCHEMA)

"""Main Entry Point"""
    
def lambda_handler(event, context):
    """Main entry point function for the lambda function"""
    try:
        synced = sync_latest_orders()
        confirm_creation_carts(synced)
        log_to_snowflake(synced)  
    except Exception as e:
        logger.info('Intacct Order sync failed with : ' + str(e))
        return {"Execution": "Failed"}

if __name__ == "__main__":
    """Main method for local testing of lambda function"""
    lambda_handler(None, None)
    